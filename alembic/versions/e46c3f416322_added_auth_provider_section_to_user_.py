"""Add auth_provider to users

Revision ID: e46c3f416322
Revises: edd4fcdee921
Create Date: 2024-11-27 12:00:00.000000

"""
from typing import Union, Sequence

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e46c3f416322'
down_revision: Union[str, None] = 'edd4fcdee921'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Define the enum type
    authprovider_enum = postgresql.ENUM('email', 'google', 'facebook', name='authprovider', create_type=False)

    # Create the enum type in the database
    authprovider_enum.create(op.get_bind())

    # Add the column using the newly created enum type
    op.add_column('users', sa.Column('auth_provider', authprovider_enum, nullable=False, server_default='email'))

    # Modify the 'hashed_password' column to be nullable (if needed)
    op.alter_column('users', 'hashed_password',
                    existing_type=sa.TEXT(),
                    type_=sa.String(),
                    nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop the 'auth_provider' column
    op.drop_column('users', 'auth_provider')

    # Drop the enum type from the database
    op.execute('DROP TYPE authprovider')

    # Revert the 'hashed_password' column to not nullable (if it was originally not nullable)
    op.alter_column('users', 'hashed_password',
                    existing_type=sa.String(),
                    type_=sa.TEXT(),
                    nullable=False)
    # ### end Alembic commands ###
